---
# Run integration tests locally against webportal

- name: Include getting skynet-js repository latest valid semver version
  include_tasks: tasks/portal-skynet-js-repo-get-latest-version.yml

# Checkout skynet-js repo locally
# NOTE: Each portal server has its own repo directory so the tests of
# different portals do not clash when they are executed in parallel.
- name: Checkout skynet-js repo
  local_action:
    module: ansible.builtin.git
    repo: "{{ skynet_js_repo_url }}"
    dest: "{{ local_temp_skynetlabs_git_repos_skynet_js }}/{{ inventory_hostname }}"
    version: "{{ skynet_js_latest_version }}"
    update: True
    force: True

- name: Get authentication cookie
  ansible.builtin.command: docker exec health-check cli __authenticate
  # Handle error until health checks are updated to support authentication
  ignore_errors: True
  register: auth_cookie_result

- name: Set authentication cookie
  set_fact:
    auth_cookie: "{{ (auth_cookie_result.stdout | trim) if (auth_cookie_result.failed | default(False) == False) else '' }}"

- name: Get Accounts limit access from .env file
  ansible.builtin.shell: ". {{ webportal_dir }}/.env && echo $ACCOUNTS_LIMIT_ACCESS"
  register: accounts_limit_access_result

# Get Skynet API key only if portal is not anonymous, i.e. when
# ACCOUNTS_LIMIT_ACCESS is defined and it is not set to 'false' (case
# insensitive), otherwise we are at an anonymous portal and we do not need API
# key to run integration tests.
- block:
    - name: Get Skynet API key from .env file
      ansible.builtin.shell: ". {{ webportal_dir }}/.env && echo $ACCOUNTS_TEST_USER_API_KEY"
      vars:
        accounts_limit_access: "{{ accounts_limit_access_result.stdout | lower }}"
      register: skynet_api_key_result

    - name: Fail if Skynet API is not defined
      fail:
        msg: |
          To run integration tests on non-anonymous portals (authenticated-only
          or paid-only) Skynet API key must be set in secure storage (LastPass)
          and in .env file.

          To fix this failure, you should rerun portal-setup-following playbook
          on your portal(s), the Skynet API key will be set during setup
          process.
      when: skynet_api_key_result.stdout == ''
  when: >-
    accounts_limit_access_result.stdout != ''
    and accounts_limit_access_result.stdout | lower != 'false'

# Run integration tests in block so that we can remove test container always,
# even in case integration tests fail.
- name: Run integration tests
  block:
    # Run integration tests locally against the portal
    # NOTE: Container name should be unique between portals so that portal
    # tests can be executed in parallel.
    - name: Run integration tests locally against the portal
      local_action:
        module: community.docker.docker_container
        name: skynet-js-integration-tests-{{ inventory_hostname }}
        image: "{{ skynet_js_docker_test_image }}"
        container_default_behavior: no_defaults
        state: started
        detach: False
        volumes:
          - "{{ local_temp_skynetlabs_git_repos_skynet_js }}:/skynet-js"
        env:
          # Set Skynet API key variable only if it is defined (don't set on
          # anonymous portals)
          SKYNET_JS_INTEGRATION_TEST_SKYNET_API_KEY: "{{ skynet_api_key_result.stdout | default(omit) }}"
          SKYNET_JS_INTEGRATION_TEST_SERVER: "https://{{ ansible_host }}"
          SKYNET_JS_INTEGRATION_TEST_CUSTOM_COOKIE: "{{ auth_cookie }}"
        working_dir: "/skynet-js/{{ inventory_hostname }}"
        command: /bin/sh -c 'yarn && yarn run jest integration'

  always:
    # Remove test container
    - name: Remove test container
      local_action:
        module: community.docker.docker_container
        name: skynet-js-integration-tests-{{ inventory_hostname }}
        container_default_behavior: no_defaults
        state: absent
