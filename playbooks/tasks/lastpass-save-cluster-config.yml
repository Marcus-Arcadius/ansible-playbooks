---
- name: Get path
  set_fact:
    cluster_config_last_path: "{{ lastpass_portal_common_and_cluster_configs_list | last }}"

- name: Check if LastPass cluster record exists
  local_action:
    module: ansible.builtin.command
    cmd: "lpass ls --sync now '{{ cluster_config_last_path }}'"
  register: lastpass_ls_result

- name: Set LastPass command add or edit
  set_fact:
    lastpass_command: "{{ 'add' if lastpass_ls_result.stdout_lines | length == 0 else 'edit' }}"

# Check if there is a difference between the old common config and the current
# common config.
- name: Check for a difference in the cluster config file
  vars:
    original_dict: "{{ webportal_common_config_last_old }}"
    new_dict: "{{ webportal_common_config_last }}"
  include_tasks: tasks/dictionary-diff.yml

- block:
    # TODO: This prompt/next fail shouldn't be run in parallel, i.e. multiple
    # portals being setup at the same time
    #
    # NOTE: the weird use of the join() statement is for formatting. The newline
    # character \n isn't recognized in this type of multiline string
    - name: Ask user if it is ok to save the cluster config file
      pause:
        prompt: |-
          It looks like we need to {{ lastpass_command }} your cluster config file in LastPass.

          Here are the fields that appear to need to be {{ lastpass_command }}ed:
          {{ diff_string }}

          If this doesn't appear to be correct, check your LastPass account and your
          config files to make sure the playbook is targeting the right files.

          Do you want to {{ lastpass_command }} your cluster config file in LastPass (y/n)?
      register: update_lastpass_result
      delegate_to: localhost

    - name: Stop the playbook if the user doesn't want to update LastPass
      fail:
        msg: |
          Your LastPass credentials where not updated, please check your LastPass account
          and your config files and then rerun this playbook.
      when: update_lastpass_result.user_input[:1] not in 'yY'

    # In case default yaml formatting is used for mongo_db_mgkey, yaml record
    # in LastPass becomes hard to read like:
    #
    # some_key: some_value
    # mongo_db_mgkey: very...long...string...
    # spread...over...jhgjgjhgjhgjhgjhgjhgjhg
    # multiple...jgfgdfdytrytoiuyiuuytuytuyty
    # lines...uytuytuytuytuytuytuytuytuytuiyt
    # in...yaml...record...uyrhvnjfsrewkhljhk
    # some_other_key: some_other_value
    #
    # The following block formats (i.e. indents) mongo_db_mgkey the following
    # way:
    #
    # some_key: some_value
    # mongo_db_mgkey: |
    #   very...long...string...
    #   spread...over...jhgjgjhgjhgjhgjhgjhgjhg
    #   multiple...jgfgdfdytrytoiuyiuuytuytuyty
    #   lines...uytuytuytuytuytuytuytuytuytuiyt
    #   in...yaml...record...uyrhvnjfsrewkhljhk
    # some_other_key: some_other_value
    #
    # In order to do it this way, we generate yaml string with a dummy
    # mongo_db_mgkey using default formatting and then we replace
    # dummy mongo_db_mgkey value with a correct value using an indented string.

    - name: Keep better yaml formatting for mongo_db_mgkey
      block:
        - name: Store mongo mgkey to temporary variable and indent it
          vars:
            # Prefix that will be rendered in final LastPass yaml
            prefix: "  "
          set_fact:
            # Add prefix to each mgkey line (indent each mgkey line)
            indented_mgkey: >-
              {{ [prefix]
              | product(webportal_common_config_last.mongo_db_mgkey.splitlines())
              | map('join')
              | list
              | join('\n') }}

        - name: Update last config with a dummy mongo mgkey value
          set_fact:
            webportal_common_config_last: >-
              {{ webportal_common_config_last
              | combine({'mongo_db_mgkey': 'dummy'}) }}

        # Create last config yaml string with a dummy mgkey value using default
        # yaml formatting and then replace mgkey with an actual value using
        # indented string.
        - name: Create last config yaml string
          set_fact:
            common_config_last_yaml: >-
              {{
                webportal_common_config_last
                | to_nice_yaml(width=2048)
                | replace(
                    'mongo_db_mgkey: dummy',
                    'mongo_db_mgkey: |' + new_line + indented_mgkey
                  )
              }}
      when: webportal_common_config_last.mongo_db_mgkey is defined

    - name: Update LastPass cluster config record
      local_action:
        module: shell
        cmd: printf "{{ common_config_last_yaml }}" | lpass {{ lastpass_command }} --sync now --notes --non-interactive '{{ cluster_config_last_path }}'
      no_log: True

  when: (lastpass_command == "edit" and different_dict ) or lastpass_command == "add"
