---
# Load user credentials from plaintext to ansible_become_pass

# # xxxqqq old begin

# - name: Load user credentials from HashiCorp Vault (if exist)
#   ansible.builtin.uri:
#     url: "{{ hashicorp_vault_url }}/v1/{{ hashicorp_vault_portal_credentials_server_incl_backend_dir }}"
#     headers:
#       X-Vault-Token: "{{ hashicorp_vault_token }}"
#     status_code:
#       - 200
#       - 404
#   delegate_to: localhost
#   register: user_credentials_result

# - name: Fail if user credentials do not exist in HashiCorp Vault
#   fail:
#     msg: |
#       Requested user credentials doesn't seem to exist in HashiCorp Vault:
#       - Ansible host: {{ inventory_hostname }}
#       - HashiCorp Vault path: {{ hashicorp_vault_url }}/v1/{{ hashicorp_vault_portal_credentials_server_incl_backend_dir }}
#   when: user_credentials_result.status != 200

# - name: Set ansible become password
#   set_fact:
#     ansible_become_pass: "{{ user_credentials_result.json.data.data.password }}"

# # xxxqqq old end

# xxxqqq new:

- name: Include checking plaintext secrets directory
  include_tasks: tasks/secrets-storage-plaintext-check-secrets-dir.yml

- name: Include checking if user credentials record exists in plaintext storage
  include_tasks: tasks/secrets-storage-plaintext-check-record-exists.yml
  vars:
    secret_path: "{{ plaintext_portal_credentials_server }}"

- name: Fail if user credentials do not exist in plaintext secrets storage
  fail:
    msg: |
      Requested user credentials doesn't seem to exist in plaintext secrets storage:
      - Ansible host: {{ inventory_hostname }}
      - User credentials path: {{ plaintext_portal_credentials_server }}
  when: not secrets_storage_record_exists

- name: Read user credentials plaintext record
  ansible.builtin.slurp:
    path: "{{ plaintext_base_dir }}/{{ plaintext_portal_credentials_server }}"
  delegate_to: localhost
  register: plaintext_user_credentials_slurped

- name: Parse user credentials plaintext record
  set_fact:
    plaintext_user_credentials_data: "{{ plaintext_user_credentials_slurped['content'] | b64decode | from_yaml }}"

- name: Set ansible become password
  set_fact:
    ansible_become_pass: "{{ plaintext_user_credentials_data.password }}"