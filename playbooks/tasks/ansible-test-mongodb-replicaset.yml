---

# MongoDB Replicaset Test

- name: Remove mongo containers (if exist)
  docker_container:
    name: "{{ item }}"
    state: absent
    container_default_behavior: no_defaults
  loop: "{{ test_config.mongo_containers }}"

- name: Ensure mgkey parent directory exists
  ansible.builtin.file:
    path: "{{ webportal_user_home_dir }}/mongo-cluster-test/docker/data/mongo-{{ item }}"
    state: directory
  become: True
  loop: "{{ test_config.mongo_indices }}"

- name: Remove mgkey file/dir if exists
  ansible.builtin.file:
    path: "{{ webportal_user_home_dir }}/mongo-cluster-test/docker/data/mongo-{{ item }}/mgkey"
    state: absent
  become: True
  loop: "{{ test_config.mongo_indices }}"

- name: Ensure mgkey with content file exists
  ansible.builtin.copy:
    content: "{{ webportal_common_config.mongo_db_mgkey }}"
    dest: "{{ webportal_user_home_dir }}/mongo-cluster-test/docker/data/mongo-{{ item }}/mgkey"
    owner: "999"
    group: "999"
    mode: "0400"
  become: True
  loop: "{{ test_config.mongo_indices }}"

- name: Start MongoDB docker containers
  community.docker.docker_container:
    name: "mongo-{{ item }}"
    published_ports: "2701{{ item }}:2701{{ item }}"
    env:
      MONGO_INITDB_ROOT_USERNAME: "{{ accounts_config.skynet_db_user }}"
      MONGO_INITDB_ROOT_PASSWORD: "{{ accounts_config.skynet_db_password }}"
    volumes: "{{ webportal_user_home_dir }}/mongo-cluster-test/docker/data/mongo-{{ item }}:/data"
    image: "{{ test_config.mongo_image}}"
    command: "--keyFile=/data/mgkey --replSet={{ webportal_common_config.mongo_db_replicaset_name }} --port 2701{{ item }}"
    container_default_behavior: "no_defaults"
    networks:
      - name: "skynet-webportal_shared"
    # Note: Set network_mode to get rid of depreciation warning.
    network_mode: "default"
  loop: "{{ test_config.mongo_indices }}"

- name: Wait for MongoDB services to be ready
  wait_for:
    host: "{{ webportal_server_config.domain_name }}"
    port: "2701{{ item }}"
    connect_timeout: 3
    delay: 0
    timeout: 30
  loop: "{{ test_config.mongo_indices }}"

- debug:
    msg: |
      Test: {{ test_item.name }}
      Members: {{ test_item.members }}

- name: Ensure MongoDB initial replicaset exists
  community.mongodb.mongodb_replicaset:
    login_host: "{{ webportal_server_config.domain_name }}"
    # xxxqqq
    login_port: 27011
    login_user: "{{ accounts_config.skynet_db_user }}"
    login_password: "{{ accounts_config.skynet_db_password }}"
    replica_set: "{{ webportal_common_config.mongo_db_replicaset_name }}"
    members: "{{ test_item.members }}"
  run_once: True

- name: Check replicaset
  community.mongodb.mongodb_status:
    login_host: "{{ webportal_server_config.domain_name }}"
    # xxxqqq
    login_port: 27011
    login_user: "{{ accounts_config.skynet_db_user }}"
    login_password: "{{ accounts_config.skynet_db_password }}"
    poll: 3
    interval: 10
  register: replicaset_result
  run_once: True

- debug:
    msg: |
      MongoDB replicaset status:

      {{ replicaset_result | to_nice_json }}