---

# MongoDB Replicaset Test

- name: Starting a new test
  debug:
    msg: |
      Test: {{ test_item.name }}
      Initial members: {{ test_item.initial_members }}
      Add members: {{ test_item.add_members | default([])}}

- name: Remove mongo containers (if exist)
  docker_container:
    name: "mongo-{{ item }}"
    state: absent
    container_default_behavior: no_defaults
  loop: "{{ test_config.mongo_indices }}"

- name: Remove test directory
  ansible.builtin.file:
    path: "{{ webportal_user_home_dir }}/mongo-cluster-test"
    state: absent
  become: True

- name: Ensure mgkey parent directory exists
  ansible.builtin.file:
    path: "{{ webportal_user_home_dir }}/mongo-cluster-test/docker/data/mongo-{{ item }}"
    state: directory
  become: True
  loop: "{{ test_config.mongo_indices }}"

- name: Ensure mgkey with content file exists
  ansible.builtin.copy:
    content: "{{ webportal_common_config.mongo_db_mgkey }}"
    dest: "{{ webportal_user_home_dir }}/mongo-cluster-test/docker/data/mongo-{{ item }}/mgkey"
    owner: "999"
    group: "999"
    mode: "0400"
  become: True
  loop: "{{ test_config.mongo_indices }}"

- name: Start MongoDB docker containers
  community.docker.docker_container:
    name: "mongo-{{ item }}"
    published_ports: "2701{{ item }}:2701{{ item }}"
    env:
      MONGO_INITDB_ROOT_USERNAME: "{{ accounts_config.skynet_db_user }}"
      MONGO_INITDB_ROOT_PASSWORD: "{{ accounts_config.skynet_db_password }}"
    volumes: "{{ webportal_user_home_dir }}/mongo-cluster-test/docker/data/mongo-{{ item }}:/data"
    image: "{{ test_config.mongo_image}}"
    command: "--keyFile=/data/mgkey --replSet={{ webportal_common_config.mongo_db_replicaset_name }} --port 2701{{ item }}"
    container_default_behavior: "no_defaults"
    networks:
      - name: "skynet-webportal_shared"
    # Note: We set network_mode to get rid of depreciation warning.
    network_mode: "default"
  loop: "{{ test_config.mongo_indices }}"

- name: Wait for MongoDB containers to be ready
  community.mongodb.mongodb_shell:
    login_host: "{{ webportal_server_config.domain_name }}"
    login_port: "2701{{ item }}"
    login_user: "{{ accounts_config.skynet_db_user }}"
    login_password: "{{ accounts_config.skynet_db_password }}"
    mongo_cmd: "docker exec mongo-{{ item }} mongo"
    eval: "rs.status()"
  register: mongo_wait_result
  until:
    - mongo_wait_result.transformed_output is defined
    - mongo_wait_result.transformed_output.ok == 1 or mongo_wait_result.transformed_output.codeName == 'NotYetInitialized'
  delay: 1
  retries: 60
  loop: "{{ test_config.mongo_indices }}"

- name: Include initializing MongoDB replicaset
  include_tasks: tasks/docker-mongo-init-replicaset.yml
  vars:
    docker_mongo_replicaset:
      members: "{{ test_item.initial_members }}"
      container_name: "mongo-1"
      host: "localhost"
      port: "27011"
      user: "{{ accounts_config.skynet_db_user }}"
      password: "{{ accounts_config.skynet_db_password }}"

# Add non-voting member (test cluster specific)
# xxxqqq add members - add voting, non-voting switch

- name: Add non-voting member(s) to MongoDB replicaset
  block:
    - name: Include getting primary MongoDB member
      include_tasks: tasks/docker-mongo-get-primary.yml
      vars:
        docker_mongo_replicaset_primary:
          container_name: "mongo-2"
          host: "localhost"
          port: "27012"
          user: "{{ accounts_config.skynet_db_user }}"
          password: "{{ accounts_config.skynet_db_password }}"

    - name: Set MongoDB primary port
      set_fact:
        mongo_primary_port: "{{ mongo_primary_host_port.split(':')[1] }}"

    - name: Set MongoDB primary container name
      set_fact:
        mongo_primary_container: "mongo-{{ mongo_primary_port | int - 27010 }}"

    - name: Add MongoDB non-voting member
      include_tasks: tasks/docker-mongo-add-non-voting-member.yml
      vars:
        docker_mongo_replicaset_add_non_voting:
          member: "{{ add_member_item }}"
          container_name: "{{ mongo_primary_container }}"
          host: "localhost"
          port: "{{ mongo_primary_port | int }}"
          user: "{{ accounts_config.skynet_db_user }}"
          password: "{{ accounts_config.skynet_db_password }}"
      loop: "{{ test_item.add_members | list }}"
      loop_control:
        loop_var: "add_member_item"
  when: test_item.add_members | default([]) != []

- name: Check final MongoDB replicaset
  block:
    - name: Get MongoDB replicaset config
      community.mongodb.mongodb_shell:
        login_host: "{{ webportal_server_config.domain_name }}"
        login_port: "27012"
        login_user: "{{ accounts_config.skynet_db_user }}"
        login_password: "{{ accounts_config.skynet_db_password }}"
        mongo_cmd: "docker exec mongo-2 mongo"
        eval: "rs.config()"
      register: mongo_config_result

    # Check MongoDB replicaset config
    # Get MongoDB replicaset status
    # Check MongoDB replicaset status