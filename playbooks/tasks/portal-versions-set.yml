---
# Set portal versions (portal, skyd, accounts)

- name: Checkout skynet-webportal repository
  ansible.builtin.git:
    repo: "{{ webportal_repo_url }}"
    dest: "{{ webportal_dir }}"
    version: "{{ portal_repo_version }}"
    update: True
    force: True

- name: Check if docker-compose.override.yml exists
  stat:
    path: "{{ webportal_dir }}/docker-compose.override.yml"
  register: docker_compose_override_stat

- name: Create docker-compose.override.yml if not exists
  ansible.builtin.template:
    src: templates/docker-compose.override.yml.new.j2
    dest: "{{ webportal_dir }}/docker-compose.override.yml"
  when: not docker_compose_override_stat.stat.exists

- name: Read docker-compose.override.yml
  slurp:
    path: "{{ webportal_dir }}/docker-compose.override.yml"
  register: docker_compose_override_slurped

- name: Parse docker-compose.override.yml
  set_fact:
    docker_compose_override_data: "{{ docker_compose_override_slurped['content'] | b64decode | from_yaml }}"

- name: Update skyd version in data variable
  set_fact:
    # ignoring ansible-lint var-spacing here because it is a false failure
    # caused by the }}}}} in the combine statement
    docker_compose_override_data: "{{ docker_compose_override_data | combine({'services': {'sia': {'build': {'args': {'branch': portal_skyd_version}}}}}, recursive=True) }}" # noqa var-spacing

# Handle accounts. Account version can be set via accounts docker image in
# docker-compose.accounts.yml otherwise via branch in config.yml variable.

- name: Include checking if accounts use docker image
  include_tasks: tasks/portal-docker-compose-accounts-check-image-is-used.yml

- name: >-
    Update accounts version in data variable (if accounts are on and are
    defined by branch)
  set_fact:
    docker_compose_override_data: "{{ docker_compose_override_data | combine({'services': {'accounts': {'build': {'args': {'branch': portal_accounts_version}}}}}, recursive=True) }}" # noqa var-spacing
  when: accounts_on and not docker_compose_accounts_image_is_used

- name: Get accounts only services
  vars:
    accounts_only_services: []
  set_fact:
    accounts_only_services: "{{ accounts_only_services + [item] }}"
  when: item not in keep_accounts_services
  loop: "{{ docker_compose_accounts_data.services.keys() | list }}"

# Get jaeger only services

- name: Read docker-compose.jaeger.yml
  slurp:
    path: "{{ webportal_dir }}/docker-compose.jaeger.yml"
  register: docker_compose_jaeger_slurped

- name: Parse docker-compose.jaeger.yml
  set_fact:
    docker_compose_jaeger_data: "{{ docker_compose_jaeger_slurped['content'] | b64decode | from_yaml }}"

- name: Get jaeger only services
  vars:
    jaeger_only_services: []
  set_fact:
    jaeger_only_services: "{{ jaeger_only_services + [item] }}"
  when: item not in keep_jaeger_services
  loop: "{{ docker_compose_jaeger_data.services.keys() | list }}"

# Render docker-compose.override.yml with our data, remove accounts/jaeger only
# services if these are turned off.
- name: Save final docker-compose.override.yml file
  ansible.builtin.template:
    src: templates/docker-compose.override.yml.final.j2
    dest: "{{ webportal_dir }}/docker-compose.override.yml"
