---

# Start portal docker services

# Include getting wanted docker-compose files
- name: Include getting wanted docker-compose files
  include_tasks: tasks/portal-docker-compose-files-get-wanted.yml

# Create timestamped log filename prefix
- name: Include getting log filename prefix
  include_tasks: tasks/portal-get-log-filename-prefix.yml

# Include getting Ansible repo branch and commit
- name: Include getting Ansible repo branch and commit
  include_tasks: tasks/playbook-version-get.yml

# Include logging Ansible version
- name: Include logging Ansible version
  include_tasks: tasks/playbook-logs-ansible-log-version.yml

# Include setting portal versions (portal, skyd, accounts)
- name: Include setting portal versions (portal, skyd, accounts)
  include_tasks: tasks/portal-versions-set.yml
  when: set_portal_versions

# Include getting portal, Sia, accounts versions
- name: Include getting portal, Sia, accounts versions
  include_tasks: tasks/portal-versions-get.yml

# Include logging portal, Sia, accounts versions
- name: Include logging portal, Sia, accounts versions
  include_tasks: tasks/portal-logs-log-versions.yml

# Log portal config files (docker-compose.*, .env)
- name: Log portal config files (docker-compose.*, .env)
  ansible.builtin.copy:
    src: "{{ webportal_dir }}/{{ item }}"
    dest: "{{ logs_dir }}/{{ log_filename_prefix }}.{{ item }}"
    remote_src: True
    mode: preserve
  loop: "{{ webportal_docker_compose_files_wanted + webportal_other_config_files }}"

# Prune docker
- name: Prune docker
  ansible.builtin.command: docker system prune --force
  async: "{{ docker_prune_timeout_secs }}"
  poll: 5

# Log status as 'starting'
- name: Log status as 'starting'
  file:
    path: "{{ logs_dir }}/{{ log_filename_prefix }}.status.starting"
    state: touch

# Print timestamp
- name: Print timestamp (starting docker services)
  debug:
    msg: "{{ inventory_hostname + ' docker services start: ' + lookup('pipe','date +%Y-%m-%dT%H:%M:%S') + ' UTC' }}"

# Start the docker services (on deploy also build images)
- name: Start the docker services (on deploy also build images)
  community.docker.docker_compose:
    project_src: "{{ webportal_dir }}"
    files: "{{ webportal_docker_compose_files_wanted }}"
    build: "{{ docker_compose_build }}"
    nocache: True
    pull: True
    state: present
    # TODO: Build in parallel, when Ansible support is added
  become: True
  become_user: "user"
  register: docker_compose_start_result

# Set list of docker compose services
- name: Set list of docker compose services
  set_fact:
    docker_compose_services: "{{ docker_compose_start_result.services.keys() | list }}"

# Log docker compose services
- name: Log docker compose services
  debug:
    msg: |
      Docker compose started following services:
      
      "{{ docker_compose_services }}"

# Prune docker
- name: Prune docker
  ansible.builtin.command: docker system prune --force
  async: "{{ docker_prune_timeout_secs }}"
  poll: 5

# Wait until Sia finished full setup
- name: Wait until Sia finished full setup
  command: docker logs sia
  register: docker_logs_sia
  until: docker_logs_sia.stdout.find("Finished full setup in") != -1
  delay: 1
  retries: "{{ sia_full_setup_timeout_secs }}"

# Include waiting for sia daemon/ready
- name: Include waiting for sia daemon/ready
  include_tasks: tasks/portal-wait-for-sia-daemon-ready.yml

# Confirm all Docker Services Started Up
- name: Wait Until Docker Services Have Started Up
  include_tasks: tasks/portal-wait-for-docker-services.yml

# Update log status to 'started'
- name: Update log status to 'started'
  include_tasks: tasks/portal-logs-update-status.yml
  vars:
    tag_from: "starting"
    tag_to: "started"
