---

# Find primary node in the MongoDB replicaset (subtask to loop over)
# TODO: This ansible playbook task, should be moved to portal role

# Notes:
# - This task file is expected to be called in a loop over MongoDB replicaset
#   member hosts with loop item variable {{ host_item }}.
# - These tasks should be generally delegated to {{ host_item }} host, not run
#   on the current Ansible host that we are handling.
# - For subcrap testing we must set ansible_port according to the subcrap host.

# Search for MongoDB primary host until you find it

- name: Check that mongo container is running
  community.docker.docker_container_info:
    name: mongo
  delegate_to: "{{ host_item }}"
  vars:
    ansible_port: "{{ hostvars[host_item].ansible_port | default(default_ssh_port) }}"
  register: mongo_container_result

- name: Set mongo container running correctly flag
  set_fact:
    mongo_container_ok: >-
      {{ (mongo_container_result.exists | default(False) and
      mongo_container_result.container.State.Running and
      not mongo_container_result.container.State.Restarting) }}

# Get Skynet DB user/pass from host_item (we are not targeting ansible_host and
# can't use mongo_config values).

- name: Get mongo user on host_item from .env file
  ansible.builtin.shell: ". {{ webportal_dir }}/.env && echo $SKYNET_DB_USER"
  delegate_to: "{{ host_item }}"
  vars:
    ansible_port: "{{ hostvars[host_item].ansible_port | default(default_ssh_port) }}"
  register: skynet_db_user_result

- name: Get mongo pass on host_item from .env file
  ansible.builtin.shell: ". {{ webportal_dir }}/.env && echo $SKYNET_DB_PASS"
  delegate_to: "{{ host_item }}"
  vars:
    ansible_port: "{{ hostvars[host_item].ansible_port | default(default_ssh_port) }}"
  register: skynet_db_pass_result

- name: Include getting mongo replicaset primary member
  include_tasks: tasks/portal-role-task-mongo-shell-eval-on-delegated-host.yml
  vars:
    mongodb_shell_delegated:
      host: "{{ host_item }}"
      user: "{{ skynet_db_user_result.stdout }}"
      password: "{{ skynet_db_pass_result.stdout }}"
      eval: "rs.status().members.forEach(m => {if (m.stateStr == 'PRIMARY') {print(m.name)}})"
      ignore_errors: True
  when: mongo_container_ok
  register: mongo_getting_primary_result

- name: Set mongo primary host
  set_fact:
    mongo_primary_host: "{{ item }}"
  when: >-
    not (mongo_getting_primary_result.skipped | default(False)) and
    not (mongo_shell_delegated_result.failed | default(False)) and
    hostvars[item].ansible_host + ':' + (hostvars[item].subcrap_mongo_port | default(default_mongo_port | string)) == mongo_shell_delegated_result.transformed_output
  loop: "{{ mongo_cluster_hosts }}"
