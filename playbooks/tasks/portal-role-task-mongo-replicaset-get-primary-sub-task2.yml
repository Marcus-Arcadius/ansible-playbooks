---

# Find primary node in the MongoDB replicaset (subtask to loop over)
# TODO: This ansible playbook task, should be moved to portal role

# Notes:
# - This task file is expected to be called in a loop over MongoDB replicaset
#   member hosts with loop item variable {{ host_item }}.
# - These tasks should be generally delegated to {{ host_item }} host, not run
#   on the current Ansible host that we are handling.

# Search for MongoDB primary host until you find it
- name: Check that mongo container is running
  community.docker.docker_container_info:
    name: mongo
  delegate_to: "{{ host_item }}"
  register: mongo_container_result

- name: Set mongo container running correctly flag
  set_fact:
    mongo_container_ok: >-
      {{ (mongo_container_result.exists | default(False) and
      mongo_container_result.container.State.Running and
      not mongo_container_result.container.State.Restarting) }}

# Get Skynet DB user/pass from host_item (we are not targeting ansible_host and
# can't use mongo_config values).

- name: Get mongo user on host_item from .env file
  ansible.builtin.shell: ". {{ webportal_dir }}/.env && echo $SKYNET_DB_USER"
  delegate_to: "{{ host_item }}"
  register: skynet_db_user_result

- name: Get mongo pass on host_item from .env file
  ansible.builtin.shell: ". {{ webportal_dir }}/.env && echo $SKYNET_DB_PASS"
  delegate_to: "{{ host_item }}"
  register: skynet_db_pass_result

- name: Get mongo replicaset primary member
  community.mongodb.mongodb_shell:
    # Use secure localhost connection unless on subcrap test cluster
    login_host: "{{ 'localhost' if (hostvars[host_item].subcrap_mongo_port is not defined) else hostvars[host_item].ansible_host }}"
    # Use default port unless on subcrap test cluster
    login_port: "{{ hostvars[host_item].subcrap_mongo_port | default('27017') }}"
    # Use delegated host_item's mongo user, because we delegate this task
    login_user: "{{ skynet_db_user_result.stdout }}"
    # Use delegated host_item's mongo password, because we delegate this task
    login_password: "{{ skynet_db_pass_result.stdout }}"
    mongo_cmd: "docker exec mongo mongo"
    eval: "rs.status().members.forEach(m => {if (m.stateStr == 'PRIMARY') {print(m.name)}})"
    # transformed_output can't be parsed correctly by this module, keep it raw
    transform: raw
  register: mongo_primary_result
  when: mongo_container_ok
  delegate_to: "{{ host_item }}"
  ignore_errors: True

- name: Set mongo primary host
  set_fact:
    mongo_primary_host: "{{ item }}"
  when: >-
    not (mongo_primary_result.failed | default(False)) and
    hostvars[item].ansible_host + ':' + (hostvars[item].subcrap_mongo_port | default('27017')) == mongo_primary_result.transformed_output
  loop: "{{ mongo_cluster_hosts }}"
