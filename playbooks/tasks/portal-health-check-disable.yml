---
# Take portal out of load balancer by stopping health check

# Check if the health check container is running.
- name: Check health check container is running
  community.docker.docker_container_info:
    name: health-check
  register: health_check_docker_container_result

# Marker the health check as disabled via the cli command
- name: Stop portal health check to take portal out of load balancer
  # NOTE: portal_action is defined by the playbook, i.e. for deploys,
  # portal_action='portal-deploy'
  command: 'docker exec health-check cli disable "{{ out_of_lb_message | default(portal_action) }}"'
  register: docker_health_check_disable_result
  # Only fail the task if there is an error reported to stderr, unless it
  # is that the container is restarting, since that means the health check isn't
  # active already.
  failed_when:
    - docker_health_check_disable_result.stderr != ''
    - docker_health_check_disable_result.stderr.find("restarting") == -1
  # Only execute the CLI command if the container is up and running. Otherwise,
  # if it is not up and running, it is practically disabled.
  when:
    - health_check_docker_container_result.exists
    - health_check_docker_container_result.container is defined
    - health_check_docker_container_result.container.State.Running

# Check if sia container is running.
- name: Check sia container is running
  community.docker.docker_container_info:
    name: sia
  register: sia_docker_container_result

# Wait 5 minutes for any small uploads and downloads to finish. After 5 minutes,
# it is likely that it is a large upload in which case it is safe to take the
# server down as the large upload will continue on another server. Or it is a
# large download which can also be resumed on another server.
- block:
    - name: "Wait for uploads to finish"
      ansible.builtin.command: docker exec sia siac renter uploads
      register: docker_renter_uploads
      # Wait until 'No files are uploading.' is found in the stdout. If sia is
      # starting up for some reason or the docker container is restarting which
      # means sia isn't running, then no uploads are happening so proceed.
      until: >-
        docker_renter_uploads.stdout.find("No files are uploading.") != -1 or
        docker_renter_uploads.stderr.find("490 Module not loaded") != -1 or
        docker_renter_uploads.stderr.find("restarting") != -1
      # Retry every 5 seconds for portal_upload_check_wait_secs seconds.
      vars:
        delay_secs: 5
        retries: "{{ (portal_upload_check_wait_secs / delay_secs) | int }}"
      delay: "{{ delay_secs }}"
      retries: "{{ retries }}"
      # Only fail the task if there is an error reported to stderr, unless it
      # is the Module not loaded error. Otherwise we will continue on after the
      # retries are complete.
      failed_when:
        - docker_renter_uploads.stderr != ''
        - docker_renter_uploads.stderr.find("490 Module not loaded") == -1

    - name: "Wait for downloads to finish"
      ansible.builtin.command: docker exec sia siac renter downloads
      register: docker_renter_downloads
      # Wait until 'No files are downloading.' is found in the stdout. If sia
      # is starting up for some reason or the docker container is restarting
      # which means sia isn't running, then no uploads are happening so
      # proceed.
      until: >-
        docker_renter_downloads.stdout.find("No files are downloading.") != -1 or
        docker_renter_downloads.stderr.find("490 Module not loaded") != -1 or
        docker_renter_downloads.stderr.find("restarting") != -1
      # Retry every 5 seconds for portal_download_check_wait_secs seconds.
      vars:
        delay_secs: 5
        retries: "{{ (portal_download_check_wait_secs / delay_secs) | int }}"
      delay: "{{ delay_secs }}"
      retries: "{{ retries }}"
      # Only fail the task if there is an error reported to stderr, unless it
      # is the Module not loaded error. Otherwise we will continue on after the
      # retries are complete.
      failed_when:
        - docker_renter_downloads.stderr != ''
        - docker_renter_downloads.stderr.find("490 Module not loaded") == -1

  # Do not wait if sia container is not running or is restarting
  when:
    - sia_docker_container_result.exists
    - sia_docker_container_result.container is defined
    - sia_docker_container_result.container.State.Running
    - not sia_docker_container_result.container.State.Restarting
