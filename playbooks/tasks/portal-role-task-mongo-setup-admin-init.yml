---
# Initialize MongoDB admin login
# TODO: This ansible playbook task, should be moved to portal role

# Prompt user for confirmation (if mongo/db already exists)

- name: Ask user if it is ok to delete and reset MongoDB database
  ansible.builtin.pause:
    prompt: |-
      Your MongoDB database doesn't run as expected.

      If you do not have any data in your database
      it is safe to continue.
      Your MongoDB database will be backupped to:
      {{ mongo_backups_dir }}
      then deleted and reset.

      If you have production data in your database
      you should fix this issue manually and rerun this playbook.

      Do you want to reset MongoDB database on {{ inventory_hostname }}?
      (y/n)
  register: reset_db_result
  delegate_to: localhost
  when: mongo_db_dir_stat_result.stat.exists

- name: Stop the playbook if the user doesn't want to delete and reset MongoDB database
  meta: end_play
  when: >-
    mongo_db_dir_stat_result.stat.exists and
    reset_db_result.user_input[:1].lower() != 'y'

# Backup mongo/db directory

- name: Stop and remove mongo container
  community.docker.docker_container:
    name: mongo
    state: absent
    container_default_behavior: no_defaults

- name: Ensure mongo/backups directory exists
  ansible.builtin.file:
    path: "{{ mongo_backups_dir }}"
    owner: "{{ webportal_user }}"
    group: "{{ webportal_user }}"
    state: directory
  become: True
  when: mongo_db_dir_stat_result.stat.exists

- name: Backup mongo/db directory if it existed before we started mongo setup
  community.general.archive:
    path: "{{ mongo_db_dir }}"
    dest: "{{ mongo_backups_dir }}/db-backup-{{ ansible_date_time.iso8601 }}.tar.gz"
    owner: "{{ webportal_user }}"
    group: "{{ webportal_user }}"
    remove: True
  become: True
  when: mongo_db_dir_stat_result.stat.exists

- name: Remove mongo/db directory
  ansible.builtin.file:
    path: "{{ mongo_db_dir }}"
    state: absent
  become: True

- name: Create mongo directory
  ansible.builtin.file:
    path: "{{ mongo_data_dir }}"
    state: directory
    owner: "{{ webportal_user }}"
    group: "{{ webportal_user }}"
  become: True

- name: Create empty mongo/db directory
  ansible.builtin.file:
    path: "{{ mongo_db_dir }}"
    state: directory
    owner: "999"
    group: "999"
  become: True

# Get MongoDB image version from docker-compose.mongodb.yml file

- name: Read docker-compose.mongodb.yml
  slurp:
    src: "{{ webportal_dir }}/docker-compose.mongodb.yml"
  register: docker_compose_mongodb_slurp

- name: Parse docker-compose.mongodb.yml
  set_fact:
    docker_compose_mongodb_vars: "{{ docker_compose_mongodb_slurp['content'] | b64decode | from_yaml }}"

- name: Get mongo image version
  set_fact:
    mongodb_image_version: "{{ docker_compose_mongodb_vars.services.mongo.image }}"

# Initialize MongoDB with admin login

- block:
    - name: Initialize mongo database with admin credentials
      community.docker.docker_container:
        image: "{{ mongodb_image_version }}"
        name: mongo-setup
        command: "-keyFile=/data/mgkey --replSet={{ webportal_common_config.skynet_db_replicaset }}"
        env:
          MONGO_INITDB_ROOT_USERNAME: "{{ webportal_common_config.skynet_db_user }}"
          MONGO_INITDB_ROOT_PASSWORD: "{{ webportal_common_config.skynet_db_pass }}"
        published_ports: "{{ default_mongo_port }}:{{ default_mongo_port }}"
        auto_remove: True
        volumes:
          - "{{ mongo_db_dir }}:/data/db"
          - "{{ mongo_mgkey_file }}:/data/mgkey"
        container_default_behavior: no_defaults
      no_log: True

    - name: Wait for MongoDB initialization finished
      ansible.builtin.command: docker logs mongo-setup
      register: mongo_setup_logs_result
      until: "'MongoDB init process complete' in mongo_setup_logs_result.stdout"
      delay: 1
      retries: 60
  rescue:
    - name: Set mongo admin init flag
      set_fact:
        mongo_admin_init_ok: False
  always:
    - name: Remove mongo setup container
      community.docker.docker_container:
        name: mongo-setup
        state: absent
        container_default_behavior: no_defaults
        stop_timeout: 60

    - name: Fail if MongoDB admin initialization has failed
      fail:
        msg: MongoDB admin initialization has failed
      when: not (mongo_admin_init_ok | default(True))
