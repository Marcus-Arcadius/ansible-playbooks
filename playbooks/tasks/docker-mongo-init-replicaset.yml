---

# Initialize MongoDB Replicaset

- name: Assert we have all arguments
  assert:
    that:
      - docker_mongo_replicaset.members | default([]) != []
      - docker_mongo_replicaset.container_name | default('') != ''
      - docker_mongo_replicaset.host | default('') != ''
      - docker_mongo_replicaset.port | default('') != ''
      - docker_mongo_replicaset.user | default('') != ''
      - docker_mongo_replicaset.password | default('') != ''

- name: Create MongoDB replicaset initialization string
  set_fact:
    mongo_replicaset_init: |
      {% set members = [] %}
      {% for member in docker_mongo_replicaset.members %}
      {% set m = {'_id': loop.index0 } %}
      {% set _ = m.update(member) %}
      {% set _ = members.append(m) %}
      {% endfor %}
      {% set init_str = {'_id': webportal_common_config.mongo_db_replicaset_name } %}
      {% set _ = init_str.update({'members': members}) %}
      {{ init_str }}

- name: Log initial replicaset string (and test to json)
  debug:
    msg: |
      Initial replicaset json:

      {{ mongo_replicaset_init | to_nice_json }}

- name: Initialize MongoDB replicaset
  community.mongodb.mongodb_shell:
    login_host: "{{ docker_mongo_replicaset.host }}"
    login_port: "{{ docker_mongo_replicaset.port }}"
    login_user: "{{ docker_mongo_replicaset.user }}"
    login_password: "{{ docker_mongo_replicaset.password }}"
    mongo_cmd: "docker exec {{ docker_mongo_replicaset.container_name }} mongo"
    eval: "rs.initiate({{ mongo_replicaset_init }})"
  register: mongo_init_result
  failed_when: mongo_init_result.transformed_output is not defined or (mongo_init_result.transformed_output.ok | default(-1) != 1)

- name: Wait for MongoDB replicaset initialization finished
  community.mongodb.mongodb_shell:
    login_host: "{{ docker_mongo_replicaset.host }}"
    login_port: "{{ docker_mongo_replicaset.port }}"
    login_user: "{{ docker_mongo_replicaset.user }}"
    login_password: "{{ docker_mongo_replicaset.password }}"
    mongo_cmd: "docker exec {{ docker_mongo_replicaset.container_name }} mongo"
    # Replicaset status() doesn't return pure JSON, so we select only some
    # attributes from members.
    eval: |
      var members = rs.status().members
      let membersStatus = []
      members.forEach((m) => membersStatus.push({"_id": m._id, "name": m.name, "stateStr": m.stateStr}))
      print('{ \"membersStatus\" : ')
      printjson(membersStatus)
      print('}')
    # transform_output can't be parsed correctly by this module, keep it raw
    transform: raw
  register: mongo_status_result
  # Wait until all members are in status PRIMARY or SECONDARY
  until:
    - mongo_status_result.transformed_output is defined
    - "'PRIMARY' in ((mongo_status_result.transformed_output | from_json).membersStatus | map(attribute='stateStr') | list)"
    - (mongo_status_result.transformed_output | from_json).membersStatus | map(attribute='stateStr') | list | reject('==', 'PRIMARY') | reject('==', 'SECONDARY') | length == 0
  delay: 1
  retries: 60
