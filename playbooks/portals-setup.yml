- name: Setup Skynet Webportals
  hosts: webportals
  gather_facts: False

  # Limit concurrency
  serial: 1

  # Stop on first error, do not execute on the next host
  any_errors_fatal: True

  # Load common vars
  vars_files:
  - vars/common.yml
  
  # Playbook specific vars
  vars:
    max_hosts: "{{ groups['webportals'] | length - 1 }}"
  #   # Rebuild docker services
  #   docker_compose_build: True
  #   # Set portal, skyd, accounts versions
  #   set_portal_versions: True
  #   portal_action: "portal-deploy"

  tasks:

    # Check '--limit' is used
    - name: Fail if you are targeting all dev and prod webportals
      include_tasks: tasks/host-limit-check.yml

    # TODO: xxx
    # Create user + password
    # Add keys (from webportal repo?)
    # Secure ufw
    # Install docker
    # Setup portal

    # Check host OS version
    - name: Check supported OS and version
      assert:
        that:
          - ansible_distribution|lower == 'debian' and ansible_distribution_version == '10'
        fail_msg: "{{ ansible_distribution }} {{ ansible_distribution_version }} is not yet supported by this role"
    
    # Update apt
    - name: Run "apt-get update"
      apt:
        update_cache: yes
        cache_valid_time: 900
    
    # Install sudo
    - name: Install sudo
      apt:
        name: sudo
        state: present
    
    # Ensure docker group
    - name: Ensure group "docker" exists
      ansible.builtin.group:
        name: "docker"
        state: present
    
    # Ensure configured users
    - name: Ensure configured users
      ansible.builtin.user:
        name: "{{ item.username }}"
        password: "{{ item.password_hash }}"
        state: present
        shell: "/bin/bash"
        groups:
          - "sudo"
          - "docker"
      loop: "{{ passworded_users }}"
    
    # Add SSH authorized keys
    - name: Add SSH authorized keys
      ansible.posix.authorized_key:
        user: "{{ item.user }}"
        state: present
        key: "{{ item.key }}"
      loop: "{{ ssh_keys_to_add }}"
    
    # Secure server
    - name: Include role to secure server
      include_role:
        name: geerlingguy.security
    
    # Configure ufw firewall
    - name: Setup ufw firewall
      include_tasks: tasks/firewall-ufw-setup.yml
    
    # Install Docker
    - name: Include role to install Docker
      include_role:
        name: geerlingguy.docker

    # Set timezone
    - name: Set timezone
      community.general.timezone:
        name: "UTC"
  
  handlers:

    - name: reload ufw firewall
      community.general.ufw:
        state: reloaded
      become: True